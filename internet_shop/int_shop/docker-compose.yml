version: "3.8"

services:
  web:
    build:
      context: .
    container_name: web_app
    image: django_web:1.0
    ports:
      - "5000:5000"
    volumes:
      - code:/code
      - postgres_socket:/var/run/postgresql  # volume для подключения БД через сокет
      - wsgi_socket:/var/run/wsgi  # volume для подключения nginx через сокет
      - static_data:/vol/web/static
      - media_data:/vol/web/media
    env_file: # файл с переменными окружения
      - ./int_shop/settings/.env
    command:
      sh -c "python manage.py collectstatic --noinput && \
      python manage.py runscript copy_media_files --chdir /code/scripts --script-args result_hash.txt && \
      python manage.py migrate && \
      uwsgi --ini /code/config/uwsgi/uwsgi.ini"
    restart: always
    depends_on:
      - db
      - redis_db

  db:
    image: postgres:14.6-alpine
    container_name: postgres_db
    env_file:
      - ./int_shop/settings/.env
    volumes:
      - shop_db_data:/var/lib/postgresql/data
      - postgres_socket:/var/run/postgresql  # использование подключения через сокет
    ports:
      - "5431:5431"  # host:docker
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-p", "5431", "-d", "shop_db", "-U", "admin_shop" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  redis_db:
    image: redis:7-alpine3.16
    container_name: redis_db
    restart: on-failure
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf  # использование кастомного конфига
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]

  rabbitmq:
    image: rabbitmq:3.10-alpine
    restart: always
    user: "rabbitmq"
    container_name: rabbitmq_broker
    volumes:
      - rabbitmq_db:/var/lib/rabbitmq/
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]

  celery:
    image: django_web:1.0
    container_name: celery_tasks
    env_file:
      - ./int_shop/settings/.env
    volumes:
      - code:/code
      - postgres_socket:/var/run/postgresql  # использование подключения через к БД через сокет
    command: celery -A int_shop worker -l INFO
    depends_on:
      - db
      - rabbitmq
      - web

  payment:
    image: stripe/stripe-cli
    container_name: stripe_payments
    env_file:
      - ./int_shop/settings/.env
    command: listen --forward-to https://onlineshopproj.pp.ua/payment/webhook/
    volumes:
      - wsgi_socket:/var/run/wsgi
    depends_on:
      - db
      - web
      - celery
      - rabbitmq

  nginx:
    build:
      context: ./config/nginx
    container_name: nginx_static
    image: nginx_proxy:1.0
    restart: always
    volumes:
      - wsgi_socket:/var/run/wsgi
      - static_data:/vol/web/static
      - media_data:/vol/web/media
      - certbot_web:/vol/www
      - proxy_dhparams:/vol/proxy
      - certbot_certs:/home/nginx/letsencrypt
    env_file:
      - ./int_shop/settings/.env
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web

  # используется только для возобновления сертификата и ключа для HTTPS
  certbot:
    build:
      context: ./config/certbot
    command: echo "Skipping..."
    env_file:
      - ./int_shop/settings/.env
    volumes:
      - certbot_web:/vol/www
      - certbot_certs:/home/nginx/letsencrypt
    depends_on:
      - nginx

volumes:
  shop_db_data:
  redis_data:
  rabbitmq_db:
  postgres_socket:
  wsgi_socket:
  code:
  static_data:
  media_data:
  certbot_web:
  proxy_dhparams:
  certbot_certs: