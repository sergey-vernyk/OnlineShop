pipeline {
    agent any

environment {
        ENV_FILE = credentials("ENV_FILE")
        POSTGRES_DB = credentials("POSTGRES_DB")
        POSTGRES_USER = credentials("POSTGRES_USER")
        POSTGRES_PASSWORD = credentials("POSTGRES_PASSWORD")
        DATABASE_NAME = credentials("DATABASE_NAME")
        DATABASE_USER = credentials("DATABASE_USER")
        DATABASE_PASSWORD = credentials("DATABASE_PASSWORD")
        DATABASE_PORT = credentials("DATABASE_PORT")
        REDIS_PORT = credentials("REDIS_PORT")
        REDIS_HOST = credentials("REDIS_HOST")
        REDIS_DB_NUM = credentials("REDIS_DB_NUM")
        REDIS_CACHE_NUM = credentials("REDIS_CACHE_NUM")
        REDIS_USER = credentials("REDIS_USER")
        REDIS_PASSWORD = credentials("REDIS_PASSWORD")
        CELERY_BROKER_URL = credentials("CELERY_BROKER_URL")
        CELERY_RESULT_BACKEND = credentials("CELERY_RESULT_BACKEND")
        ACCESS_FACEBOOK_USER_TOKEN = credentials("ACCESS_FACEBOOK_USER_TOKEN")
        BEARER_AUTHORIZATION_TOKEN_GOOGLE = credentials("BEARER_AUTHORIZATION_TOKEN_GOOGLE")
}
    stages {
        stage("Clone repository to workspace") {
            steps {
                script {
                    //if project directory does not exist, clone repository and copy file with environment variables to the project
                    if (!fileExists("OnlineShop"))
                        sh '''
                            git clone https://github.com/sergey-vernyk/OnlineShop.git
                            cat ${ENV_FILE} > env && \
                            cp env ${WORKSPACE}/OnlineShop/internet_shop/int_shop/int_shop/settings/.env
                        '''
                }
            }
        }
        stage("Build and Run Containers") {
            steps {
                // build django app to image
                script {
                    def dockerfileDir = "${WORKSPACE}/OnlineShop/internet_shop/int_shop"
                    def dockerImageName = "django_web_jenkins"
                    sh "docker build -t ${dockerImageName} -f ${dockerfileDir}/Dockerfile ${dockerfileDir}"
                }
                // run builded django app
                sh '''
                    docker run -d --name django_app \
                        --expose 5000 \
                        -v ${WORKSPACE}/var/run/psql:/var/run/postgresql \
                        --env DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY} \
                        --env DATABASE_NAME=${DATABASE_NAME} \
                        --env DATABASE_USER=${DATABASE_USER} \
                        --env DATABASE_PASSWORD=${DATABASE_PASSWORD} \
                        --env DATABASE_PORT=${DATABASE_PORT} \
                        --env REDIS_PORT=${REDIS_PORT} \
                        --env REDIS_HOST=${REDIS_HOST} \
                        --env REDIS_DB_NUM=${REDIS_DB_NUM} \
                        --env REDIS_CACHE_NUM=${REDIS_CACHE_NUM} \
                        --env REDIS_USER=${REDIS_USER} \
                        --env REDIS_PASSWORD=${REDIS_PASSWORD} \
                        --env CELERY_BROKER_URL=${CELERY_BROKER_URL} \
                        --env CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND} \
                        --env ACCESS_FACEBOOK_USER_TOKEN=${ACCESS_FACEBOOK_USER_TOKEN} \
                        --env BEARER_AUTHORIZATION_TOKEN_GOOGLE=${BEARER_AUTHORIZATION_TOKEN_GOOGLE} \
                        --entrypoint /bin/sh django_web_jenkins -c "python manage.py runserver 5000"
                '''
                // run postgres container with environment variables
                sh '''
                    docker run -d --name postgres_jenkins \
                        -v ${WORKSPACE}/var/run/psql:/var/run/postgresql \
                        --env POSTGRES_DB=${POSTGRES_DB} \
                        --env POSTGRES_USER=${POSTGRES_USER} \
                        --env POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
                        --expose 5432 postgres:14.6-alpine
                '''
                // run redis container
                sh '''
                    docker run -d --name redis_db_jenkins \
                        -v ${WORKSPACE}/OnlineShop/internet_shop/int_shop/config/redis/redis.conf:/usr/local/etc/redis/redis.conf \
                        --expose 6379 redis:7-alpine3.16 redis-server /usr/local/etc/redis/redis.conf
                '''
            }
        }
        stage("Create docker network and tie running containers with created network") {
            steps {
                //create docker network
                sh "docker network create jenkins-network"

                //tie all running containers to the network
                sh "docker network connect --alias redis-db jenkins-network redis_db_jenkins"
                sh "docker network connect --alias postgresql-db jenkins-network postgres_jenkins"
                sh "docker network connect --alias web_app_django jenkins-network django_app"
            }
        }
        stage("Test and Coverage") {
            steps {
                //make project's directory available for all users
                sh 'docker exec -u root django_app sh -c "cd / && chmod 777 -R /code/ && exit"'
                //make tests and coverage
                sh '''
                    docker exec django_app \
                        sh -c "coverage run --source '.' --omit '*/migrations/*,*/tests/*,*/settings/*,int_shop/*' \
                        manage.py test --exclude-tag social_profiles && \
                        coverage report && \
                        exit"
                '''
            }
        }
    }
    post { 
        success {
            //remove all containers and network
            sh "docker stop redis_db_jenkins postgres_jenkins django_app"
            sh "docker rm redis_db_jenkins postgres_jenkins django_app"
            sh "docker network rm jenkins-network"
            
            sh "cd ${WORKSPACE} && rm -r OnlineShop"
        }
    }
}